// Â© 2025 Mohammad Hossein Dokht Esmati <desmati@gmail.com> - Licensed under GPL-3.0-or-later
// This file is part of Library Management System. This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY

using Library.Domain.Entities;
using Library.Infrastructure.Data;

using Microsoft.EntityFrameworkCore;

namespace Library.MigrationService;

public class DataSeeder(LibraryDbContext _context)
{
	public async Task SeedAsync(CancellationToken cancellationToken)
	{
		if (await _context.Books.AnyAsync(cancellationToken: cancellationToken) || await _context.Users.AnyAsync(cancellationToken: cancellationToken) || await _context.Loans.AnyAsync(cancellationToken: cancellationToken))
		{
			return;
		}

		var books = CreateBooks();
		var users = CreateUsers();

		await _context.Books.AddRangeAsync(books, cancellationToken);
		await _context.Users.AddRangeAsync(users, cancellationToken);
		await _context.SaveChangesAsync(cancellationToken);

		var loans = CreateLoans(books, users);
		await _context.Loans.AddRangeAsync(loans, cancellationToken);
		await _context.SaveChangesAsync(cancellationToken);
	}

	private static List<Book> CreateBooks()
	{
		var bookData = new[]
		{
			// TODO: review Thee following data generated by AI
			("978-0-06-112008-4", "To Kill a Mockingbird", "Harper Lee", 324, 1960),
			("978-0-7432-7356-5", "1984", "George Orwell", 328, 1949),
			("978-0-14-303943-3", "Pride and Prejudice", "Jane Austen", 432, 1813),
			("978-0-7432-4722-1", "The Great Gatsby", "F. Scott Fitzgerald", 180, 1925),
			("978-0-316-76948-0", "The Catcher in the Rye", "J.D. Salinger", 277, 1951),
			("978-0-06-093546-7", "Brave New World", "Aldous Huxley", 268, 1932),
			("978-0-452-28423-4", "The Handmaid's Tale", "Margaret Atwood", 311, 1985),
			("978-0-06-112241-5", "The Hobbit", "J.R.R. Tolkien", 310, 1937),
			("978-0-345-33968-3", "The Lord of the Rings", "J.R.R. Tolkien", 1178, 1954),
			("978-0-590-35340-3", "Harry Potter and the Philosopher's Stone", "J.K. Rowling", 223, 1997),
			("978-0-439-06486-6", "Harry Potter and the Chamber of Secrets", "J.K. Rowling", 251, 1998),
			("978-0-439-13635-8", "Harry Potter and the Prisoner of Azkaban", "J.K. Rowling", 317, 1999),
			("978-0-06-112009-1", "Charlotte's Web", "E.B. White", 192, 1952),
			("978-0-14-017739-8", "Of Mice and Men", "John Steinbeck", 107, 1937),
			("978-0-14-118280-3", "Animal Farm", "George Orwell", 112, 1945),
			("978-0-316-34611-9", "The Book Thief", "Markus Zusak", 552, 2005),
			("978-0-06-085052-4", "The Alchemist", "Paulo Coelho", 208, 1988),
			("978-0-385-33312-0", "The Da Vinci Code", "Dan Brown", 454, 2003),
			("978-0-307-47498-4", "The Girl with the Dragon Tattoo", "Stieg Larsson", 465, 2005),
			("978-0-553-38169-8", "A Game of Thrones", "George R.R. Martin", 694, 1996),
			("978-0-679-73226-4", "Beloved", "Toni Morrison", 324, 1987),
			("978-0-140-44930-8", "Frankenstein", "Mary Shelley", 280, 1818),
			("978-0-14-017730-5", "Crime and Punishment", "Fyodor Dostoevsky", 671, 1866),
			("978-0-14-044792-5", "The Brothers Karamazov", "Fyodor Dostoevsky", 796, 1880),
			("978-0-14-303600-5", "Jane Eyre", "Charlotte Bronte", 532, 1847),
			("978-0-14-143951-8", "Wuthering Heights", "Emily Bronte", 416, 1847),
			("978-0-14-118237-7", "The Picture of Dorian Gray", "Oscar Wilde", 254, 1890),
			("978-0-14-143957-0", "Dracula", "Bram Stoker", 418, 1897),
			("978-0-143-03949-5", "Moby Dick", "Herman Melville", 720, 1851),
			("978-0-14-303922-8", "The Adventures of Huckleberry Finn", "Mark Twain", 366, 1884)
		};

		return [.. bookData.Select(b => new Book(
			Guid.NewGuid(),
			b.Item1,
			b.Item2,
			b.Item3,
			b.Item4,
			b.Item5
		))];
	}

	private static List<User> CreateUsers()
	{
		var userNames = new[]
		{
			// TODO: review Thee following data generated by AI
			"Alice Johnson",
			"Bob Smith",
			"Carol Williams",
			"David Brown",
			"Emma Davis",
			"Frank Miller",
			"Grace Wilson",
			"Henry Moore",
			"Isabella Taylor",
			"Jack Anderson",
			"Katherine Thomas",
			"Liam Jackson",
			"Mia White",
			"Noah Harris",
			"Olivia Martin"
		};

		var random = new Random(42); // Fixed seed for reproducibility
		var now = DateTime.UtcNow;

		return [.. userNames.Select(name => new User(
			Guid.NewGuid(),
			name,
			now.AddDays(-random.Next(30, 365)) // Registered in the past year
		))];
	}

	private static List<Loan> CreateLoans(List<Book> books, List<User> users)
	{
		var loans = new List<Loan>();
		var random = new Random(42); // Fixed seed for reproducibility
		var now = DateTime.UtcNow;

		// Create 80-100 loans with realistic patterns
		var loanCount = 80 + random.Next(21); // 80-100 loans

		for (var i = 0; i < loanCount; i++)
		{
			var user = users[random.Next(users.Count)];
			var book = books[random.Next(books.Count)];

			// Borrow date: random time in the past 12 months
			var borrowedAt = now.AddDays(-random.Next(1, 365));

			// 70% of loans are returned
			DateTime? returnedAt = null;
			if (random.NextDouble() < 0.7)
			{
				// Return date: 7-60 days after borrow date
				var daysToReturn = random.Next(7, 61);
				returnedAt = borrowedAt.AddDays(daysToReturn);

				// Make sure return date is not in the future
				if (returnedAt > now)
				{
					returnedAt = now.AddDays(-random.Next(1, 7));
				}
			}

			// Check for duplicate (same user, book, and borrow time)
			if (!loans.Any(l => l.UserId == user.UserId
				&& l.BookId == book.BookId
				&& l.BorrowedAt == borrowedAt))
			{
				var loan = new Loan(
					Guid.NewGuid(),
					book.BookId,
					user.UserId,
					borrowedAt,
					returnedAt
				);

				loans.Add(loan);
			}
		}

		// Add some popular book patterns (ensure certain books are borrowed more frequently)
		var popularBooks = books.Take(5).ToList();
		for (var i = 0; i < 20; i++)
		{
			var user = users[random.Next(users.Count)];
			var book = popularBooks[random.Next(popularBooks.Count)];

			var borrowedAt = now.AddDays(-random.Next(1, 365));

			DateTime? returnedAt = null;
			if (random.NextDouble() < 0.8) // Higher return rate for popular books
			{
				var daysToReturn = random.Next(7, 45);
				returnedAt = borrowedAt.AddDays(daysToReturn);

				if (returnedAt > now)
				{
					returnedAt = now.AddDays(-random.Next(1, 7));
				}
			}

			if (!loans.Any(l => l.UserId == user.UserId
				&& l.BookId == book.BookId
				&& l.BorrowedAt == borrowedAt))
			{
				var loan = new Loan(
					Guid.NewGuid(),
					book.BookId,
					user.UserId,
					borrowedAt,
					returnedAt
				);

				loans.Add(loan);
			}
		}

		return loans;
	}
}
